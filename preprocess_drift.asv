%% load data
%data pathway 
np_data_pathway = 'G:\AllOutputs\b103a04_ksoutput\b103a04_20210408_NPSess01_g0_cat\catgt_b103a04_20210408_NPSess01_g0\Cat_b103a04_20210408_NPSess01_g0_imec0';
% extract_waveformdata_dj(np_data_pathway, bin_name, rez);
ksfolder = fullfile(np_data_pathway,'ks2_5');

%load data
cgsFile = fullfile(ksfolder,'cluster_info.csv');
cluster_info = readtable(cgsFile);
cluster_info.Properties.VariableNames = {'id','Amplitude', 'ContamPct', 'KSLabel',...
    'amp','ch','depth','fr','n_spikes','sh'};

UsedClus_IDs = cluster_info.id;
ClusKSLabel = cluster_info.KSLabel;
ChannelUseds_id = cluster_info.ch;
isgoodlabel = cellfun(@(x) strcmp(x, 'good'),ClusKSLabel);
UsedGoodClus_IDs = UsedClus_IDs(isgoodlabel);
ChannelgoodUseds_id = ChannelUseds_id(isgoodlabel);

SpikeTimeSample = readNPY(fullfile(ksfolder,'spike_times.npy'));
SpikeClus = readNPY(fullfile(ksfolder,'spike_clusters.npy'));

NumGoodClus = length(UsedGoodClus_IDs);
spike_time_incluster = cell(NumGoodClus,1);
WaveWinSamples = [-30,51];%wafeform duration

% for i = 1:NumGoodClus
%     spike_time_incluster{i} = SpikeTimeSample(SpikeClus == UsedGoodClus_IDs(i));
% end

%% extract waveform data for each good unit and cal channel position

for cUnit = 1: NumGoodClus
    
    goodcClusInds = UsedGoodClus_IDs(cUnit);
    %cClusChannel = ChannelUseds_id(cUnit);
    cClusChannel = ChannelgoodUseds_id(cUnit)+1;
    cClus_Sptimes = SpikeTimeSample(SpikeClus == goodcClusInds);
    
    %maximum of SPNums is 2000
    if numel(cClus_Sptimes) < 2000
        UsedSptimes = cClus_Sptimes;
        SPNums = length(UsedSptimes);
    else
        UsedSptimes = cClus_Sptimes(randsample(numel(cClus_Sptimes),2000));
        SPNums = 2000;
    end  
    
    cspWaveform = nan(SPNums,diff(WaveWinSamples));  %create matrix(SPNums, WaveWinSamples) with elements NaN
    AllChannelWaveData = nan(SPNums,384,diff(WaveWinSamples));
    for csp = 1 : SPNums
        cspTime = UsedSptimes(csp);
        cspStartInds = cspTime+WaveWinSamples(1);
        cspEndInds = cspTime+WaveWinSamples(2);
        offsetTimeSample = cspStartInds - 1;
        
        %ensure that the spike in the recording time
        if offsetTimeSample < 0 || cspEndInds > rez.ops.sampsToRead
            continue;
        end  
        
        %read waveform data from .bin file
        offsets = 385*(cspStartInds-1)*2;   %position indicator
        status = fseek(ftempid,offsets,'bof');
        if ~status
            % correct offset value is set
            AllChnDatas = fread(ftempid,[385 diff(WaveWinSamples)],'int16');% read data with dimensions [385 diff(WaveWinSamples)]
            cspWaveform(csp,:) = AllChnDatas(cClusChannel,:);% waveform data in a channel
            AllChannelWaveData(csp,:,:) = AllChnDatas(1:384,:); % for waveform spread calculation
        end
    end
    
    %save waveform data
    if size(cspWaveform,1) == 1
        AvgWaves = cspWaveform;
        UnitDatas{cUnit,2} = squeeze(AllChannelWaveData);
    else
        AvgWaves = mean(cspWaveform,'omitnan');%omitnan means the mean is of all non-NaN elements
        UnitDatas{cUnit,2} = squeeze(mean(AllChannelWaveData,'omitnan'));
    end
    UnitDatas{cUnit,1} = cspWaveform;
    
    clearvars AllChannelWaveData
    
    %------------------ plot and calculate waveform feature----------------
    huf = figure('visible','off');
    
    waveform_feature_funcollect = waveform_funcollect;
    [wave_amplitude, trough2peakT, repolarT, prepeak2pospeakratio, troughpeakidx] = ...
                                waveform_feature_funcollect.cal_waveform_feature(AvgWaves,WaveWinSamples);

    plot(AvgWaves);
    title(num2str(UsedClus_IDs(cUnit),'cluster=%d'));
    text(6,0.8*max(AvgWaves),{sprintf('trough2peak = %d',trough2peakT);...
        sprintf('repolarT = %d',repolarT);...
        sprintf('prepeak2pospeakratio = %.2f',prepeak2pospeakratio)},'FontSize',10);    
        
    %cal current channel at each sammple time, matrix: sample_time*num_good unit value: channnel
    
    
    saveName = fullfile(ksprocessfolder,'Waveforms_bin',sprintf('Unit%d waveform plot save',cUnit));
    saveas(huf,saveName,'png');   
    saveas(huf,saveName,'fig');   
    close(huf);
    
    fprintf('Unit%d/%d waveform plot save.\n',cUnit, NumofUnit)
end

% save(fullfile(ksprocessfolder,'WaveformDatas.mat'), 'UnitDatas', 'UnitFeatures', '-v7.3');
fclose(ftempid);
%% plot drift for all units
%x axis:time
%y axis:good units number
%value: current channel - mode(all channel), showing drift distance

%cal channel at each spike time for good cluster i

%% 